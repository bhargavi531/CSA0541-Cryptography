#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#define ALPHABET_SIZE 26
void generate_key(int *key, size_t len) {
    for (size_t i = 0; i < len; i++) {
        key[i] = rand() % ALPHABET_SIZE;
    }
}
void encrypt(const char *plaintext, char *ciphertext, const int *key) {
    size_t len = strlen(plaintext);
    for (size_t i = 0; i < len; i++) {
        if (plaintext[i] >= 'A' && plaintext[i] <= 'Z') {
            ciphertext[i] = ((plaintext[i] - 'A' + key[i]) % ALPHABET_SIZE) + 'A';
        } else if (plaintext[i] >= 'a' && plaintext[i] <= 'z') {
            ciphertext[i] = ((plaintext[i] - 'a' + key[i]) % ALPHABET_SIZE) + 'a';
        } else {
            ciphertext[i] = plaintext[i];  
        }
    }
    ciphertext[len] = '\0';
}
void decrypt(const char *ciphertext, char *plaintext, const int *key) {
    size_t len = strlen(ciphertext);
    for (size_t i = 0; i < len; i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = ((ciphertext[i] - 'A' - key[i] + ALPHABET_SIZE) % ALPHABET_SIZE) + 'A';
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = ((ciphertext[i] - 'a' - key[i] + ALPHABET_SIZE) % ALPHABET_SIZE) + 'a';
        } else {
            plaintext[i] = ciphertext[i];  
        }
    }
    plaintext[len] = '\0';
}
int main() {
    srand(time(NULL));  
    char plaintext[256];
    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';  
    size_t len = strlen(plaintext);
    int *key = (int *)malloc(len * sizeof(int));
    char *ciphertext = (char *)malloc((len + 1) * sizeof(char));
    char *decryptedtext = (char *)malloc((len + 1) * sizeof(char));
    if (key == NULL || ciphertext == NULL || decryptedtext == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }
    generate_key(key, len);
    encrypt(plaintext, ciphertext, key);
    printf("Ciphertext: %s\n", ciphertext);
    decrypt(ciphertext, decryptedtext, key);
    printf("Decrypted text: %s\n", decryptedtext);
    free(key);
    free(ciphertext);
    free(decryptedtext);
    return 0;
}
