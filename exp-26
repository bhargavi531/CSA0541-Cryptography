#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include <math.h>
uint64_t gcd(uint64_t a, uint64_t b);
uint64_t mod_inverse(uint64_t a, uint64_t m);
uint64_t mod_exp(uint64_t base, uint64_t exp, uint64_t mod);
void generate_keys(uint64_t p, uint64_t q, uint64_t *e, uint64_t *d, uint64_t *n);
uint64_t encrypt(uint64_t message, uint64_t e, uint64_t n);
uint64_t decrypt(uint64_t ciphertext, uint64_t d, uint64_t n);
int main() {
    uint64_t p = 61;
    uint64_t q = 53;
    uint64_t n, e, d;
    generate_keys(p, q, &e, &d, &n);
    printf("Public Key: (e: %llu, n: %llu)\n", e, n);
    printf("Private Key: (d: %llu, n: %llu)\n", d, n);
    uint64_t message = 42;
    printf("Original Message: %llu\n", message);
    uint64_t ciphertext = encrypt(message, e, n);
    printf("Encrypted Message: %llu\n", ciphertext);
    uint64_t decrypted_message = decrypt(ciphertext, d, n);
    printf("Decrypted Message: %llu\n", decrypted_message);
    uint64_t new_e, new_d;
    generate_keys(p, q, &new_e, &new_d, &n);
    printf("New Public Key: (e: %llu, n: %llu)\n", new_e, n);
    printf("New Private Key: (d: %llu, n: %llu)\n", new_d, n);
    ciphertext = encrypt(message, new_e, n);
    printf("Encrypted Message with New Key: %llu\n", ciphertext);
    decrypted_message = decrypt(ciphertext, new_d, n);
    printf("Decrypted Message with New Key: %llu\n", decrypted_message);
    return 0;
}
uint64_t gcd(uint64_t a, uint64_t b) {
    while (b != 0) {
        uint64_t temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
uint64_t mod_inverse(uint64_t a, uint64_t m) {
    uint64_t m0 = m, t, q;
    uint64_t x0 = 0, x1 = 1;
    if (m == 1)
        return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    if (x1 < 0)
        x1 += m0;
    return x1;
}
uint64_t mod_exp(uint64_t base, uint64_t exp, uint64_t mod) {
    uint64_t result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1)
            result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}
void generate_keys(uint64_t p, uint64_t q, uint64_t *e, uint64_t *d, uint64_t *n) {
    *n = p * q;
    uint64_t phi = (p - 1) * (q - 1);
    *e = 2;
    while (*e < phi && gcd(*e, phi) != 1) {
        (*e)++;
    }
    *d = mod_inverse(*e, phi);
}
uint64_t encrypt(uint64_t message, uint64_t e, uint64_t n) {
    return mod_exp(message, e, n);
}
uint64_t decrypt(uint64_t ciphertext, uint64_t d, uint64_t n) {
    return mod_exp(ciphertext, d, n);
}
